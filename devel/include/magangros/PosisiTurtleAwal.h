// Generated by gencpp from file magangros/PosisiTurtleAwal.msg
// DO NOT EDIT!


#ifndef MAGANGROS_MESSAGE_POSISITURTLEAWAL_H
#define MAGANGROS_MESSAGE_POSISITURTLEAWAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace magangros
{
template <class ContainerAllocator>
struct PosisiTurtleAwal_
{
  typedef PosisiTurtleAwal_<ContainerAllocator> Type;

  PosisiTurtleAwal_()
    : xawal(0.0)
    , yawal(0.0)  {
    }
  PosisiTurtleAwal_(const ContainerAllocator& _alloc)
    : xawal(0.0)
    , yawal(0.0)  {
  (void)_alloc;
    }



   typedef double _xawal_type;
  _xawal_type xawal;

   typedef double _yawal_type;
  _yawal_type yawal;





  typedef boost::shared_ptr< ::magangros::PosisiTurtleAwal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::magangros::PosisiTurtleAwal_<ContainerAllocator> const> ConstPtr;

}; // struct PosisiTurtleAwal_

typedef ::magangros::PosisiTurtleAwal_<std::allocator<void> > PosisiTurtleAwal;

typedef boost::shared_ptr< ::magangros::PosisiTurtleAwal > PosisiTurtleAwalPtr;
typedef boost::shared_ptr< ::magangros::PosisiTurtleAwal const> PosisiTurtleAwalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::magangros::PosisiTurtleAwal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::magangros::PosisiTurtleAwal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::magangros::PosisiTurtleAwal_<ContainerAllocator1> & lhs, const ::magangros::PosisiTurtleAwal_<ContainerAllocator2> & rhs)
{
  return lhs.xawal == rhs.xawal &&
    lhs.yawal == rhs.yawal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::magangros::PosisiTurtleAwal_<ContainerAllocator1> & lhs, const ::magangros::PosisiTurtleAwal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace magangros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::magangros::PosisiTurtleAwal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::magangros::PosisiTurtleAwal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::magangros::PosisiTurtleAwal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::magangros::PosisiTurtleAwal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::magangros::PosisiTurtleAwal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::magangros::PosisiTurtleAwal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::magangros::PosisiTurtleAwal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "288aa94287e593d6b2c56dbae4b540d0";
  }

  static const char* value(const ::magangros::PosisiTurtleAwal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x288aa94287e593d6ULL;
  static const uint64_t static_value2 = 0xb2c56dbae4b540d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::magangros::PosisiTurtleAwal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "magangros/PosisiTurtleAwal";
  }

  static const char* value(const ::magangros::PosisiTurtleAwal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::magangros::PosisiTurtleAwal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 xawal\n"
"float64 yawal\n"
;
  }

  static const char* value(const ::magangros::PosisiTurtleAwal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::magangros::PosisiTurtleAwal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xawal);
      stream.next(m.yawal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PosisiTurtleAwal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::magangros::PosisiTurtleAwal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::magangros::PosisiTurtleAwal_<ContainerAllocator>& v)
  {
    s << indent << "xawal: ";
    Printer<double>::stream(s, indent + "  ", v.xawal);
    s << indent << "yawal: ";
    Printer<double>::stream(s, indent + "  ", v.yawal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAGANGROS_MESSAGE_POSISITURTLEAWAL_H
